apiVersion: v1
kind: Service
metadata:
  name: backend-svc
  namespace: microservice-manifests
  labels:
    app: backend
    app.kubernetes.io/name: backend
    app.kubernetes.io/instance: exercise-03
    app.kubernetes.io/part-of: microservice-app
    app.kubernetes.io/managed-by: kubectl
  annotations:
    kubernetes.io/description: "Backend service for microservice application"
    kubernetes-learning.io/developer-login: "andrey.stryukov"
    kubernetes-learning.io/exercise: "03"
spec:
  selector:
    app: backend
  type: ClusterIP
  ports:
    - name: backend-svc
      protocol: TCP
      port: 8081
      targetPort: api
---
apiVersion: v1
kind: Secret
metadata:
  name: backend-secrets
  namespace: microservice-manifests
type: Opaque
data:
  postgres_password: ZGJwYXNzd29yZA==
  jwt_key: c2VjcmV0and0a2V5
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: backend-deploy
  namespace: microservice-manifests
  labels:
    app: backend-deploy
    app.kubernetes.io/name: backend
    app.kubernetes.io/instance: exercise-03
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/component: backend
    app.kubernetes.io/part-of: microservice-app
    app.kubernetes.io/managed-by: kubectl
  annotations:
    kubernetes.io/description: "Backend API service for microservice application"
    kubernetes.io/change-cause: "Initial deployment"
    kubernetes-learning.io/developer-login: "andrey.stryukov"
    kubernetes-learning.io/exercise: "03"
spec:
  selector:
    matchLabels:
      app: backend
  replicas: 3
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: backend
        app.kubernetes.io/name: backend
        app.kubernetes.io/instance: exercise-03
        app.kubernetes.io/version: "1.0.0"
        app.kubernetes.io/component: api
        app.kubernetes.io/part-of: microservice-app
        app.kubernetes.io/managed-by: kubectl
      annotations:
        kubernetes-learning.io/developer-login: "andrey.stryukov"
        kubernetes-learning.io/exercise: "03"
    spec:
      initContainers:
        - name: wait-for-db
          image: postgres:alpine
          command:
            [
              "sh",
              "-c",
              "until pg_isready -h postgres-0.postgres-svc -U app; do echo waiting for db; sleep 2; done;",
            ]
      containers:
        - name: backend
          image: andreystryukov/k8s_private_registry:backend-1.0.0
          imagePullPolicy: IfNotPresent
          resources:
            requests:
              cpu: 100m
              memory: 256Mi
              ephemeral-storage: 100Mi
            limits:
              cpu: 100m
              memory: 256Mi
              ephemeral-storage: 100Mi
          livenessProbe:
            tcpSocket:
              port: 8081
            initialDelaySeconds: 1
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 12
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /api/ping
              port: 8081
            initialDelaySeconds: 1
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 12
            periodSeconds: 10
          startupProbe:
            httpGet:
              path: /api/ping
              port: 8081
            initialDelaySeconds: 1
            timeoutSeconds: 5
            failureThreshold: 12
          env:
            - name: POSTGRES_USER
              value: app
            - name: POSTGRES_DB
              value: app
            - name: POSTGRES_SERVER_HOST
              value: postgres-0.postgres-svc
            - name: CLIENT_URL
              value: http://frontend-svc
            - name: SERVER_PORT
              value: ":8081"
            - name: RUN_MIGRATION
              value: "false"
          ports:
            - containerPort: 8081
              name: api
              protocol: TCP
          volumeMounts:
            - name: creds
              mountPath: /run/secrets/
            - name: data
              mountPath: /var/lib/backend/data
          securityContext:
            allowPrivilegeEscalation: false
      volumes:
        - name: creds
          secret:
            secretName: backend-secrets
            items:
              - key: postgres_password
                path: postgres_password
              - key: jwt_key
                path: jwt_key
        - name: data
          persistentVolumeClaim:
            claimName: backend-pvc
      imagePullSecrets:
        - name: regcred
      terminationGracePeriodSeconds: 30
      automountServiceAccountToken: false
      restartPolicy: Always
